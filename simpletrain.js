const Network = require(`./network`);

function range(start, stop, step = 1) {
    ([start, stop] = [stop ? start : 0, stop || start]);
    return [...Array(Math.ceil((stop - start) / step))]
        .map((_, i) => start + i * step);
}

const argMax = array => array.indexOf(Math.max(...array));

function hasNInARow(array, n) {
    return array.join('').includes(Array(n).fill(1).join(''));
}

const numInputs = 10;
const learningRate = 3;
const batchSize = 100;
const trainingSetSize = 10000;
const testingSetSize = trainingSetSize / 10;

const nInARow = 4;

// Simple random dataset
let dataSet = range(trainingSetSize + testingSetSize).map(() => {
    let data = range(numInputs).map(() => Number(Math.random() < .25));
    let hasTwoInARow = hasNInARow(data, nInARow);
    return [data, Number(hasTwoInARow)];
});

let trainingData = dataSet.slice(0, trainingSetSize);
let testData = dataSet.slice(trainingSetSize);

let network = new Network([numInputs, 16, 2]);

/* Pretrained models */
// 10 x 16 x 2 network
// 997 / 1000 - 4 in a row
// network.biases = [[3.6172007102442207, 3.776283122853951, -1.4124791704896482, 0.936596918317714, 1.1712910993049956, 2.265149261943225, -0.6025142252927992, 0.30236411615369146, -2.972618874508213, -0.5050322717748027, -3.353104614664961, 1.0561101394759895, 0.1310648371492052, -2.4624411814468092, 3.683905334782823, 2.0671109624214816], [-1.2541392821993171, 1.4922476924451744]];
// network.weights = [[[0.8072984569487135, 0.3206433677934099, -0.5439001425333753, 1.1725877620877454, -1.3983723585994683, -2.580403996213777, -1.5942273961249438, -0.2977332018130872, -1.0107024111553624, -1.113277287981293], [1.4352919082951352, 1.445884543285016, 0.6276994313675618, 1.908521145364229, -2.291456173527882, -2.8917001389304913, -1.9314995547256655, -0.08053295831065096, -1.8710447390607357, -0.046096117934287556], [0.05119254413848062, 0.5100415616682308, 1.5218453930280504, 0.194255426420336, -0.47043339523082817, 0.30919552021401636, 0.04932044564786983, -0.990253043413597, -2.123470011715307, 0.3174535292647423], [0.472744980936267, -0.7709326995848483, 1.0132231649536454, -3.404773932696509, 0.7232334141716646, -0.5194696864276507, -0.27056607506906766, -1.2523616637671269, -1.2270842977893135, -0.256951426270064], [-0.4538862641908409, 0.552342419896916, -1.148649413291533, -1.893086902177889, 0.1532370184421636, 0.7790528765767286, -1.8634653689113496, -1.5666630796577736, -0.17974816889753323, 0.8031773923359168], [-1.1379731310722867, -2.7970136975761117, 0.02550123708940601, 1.0467725579660896, -0.7736233388653262, -3.2150191685031366, -0.46528529540244395, -0.012512211420743808, -1.4370768899343012, -1.264065223019155], [-2.0269317371346567, -0.2438145566088146, 0.10224453814550896, 1.877881546845629, -0.9818343570682884, 0.21944321074864817, 1.9815799791764992, 0.23987656226192774, 0.193045398204277, 0.8569055573186786], [0.9838052428419246, -0.43804867411705933, -0.29189138602721987, -2.8869720753714607, 3.3020529030134873, -2.071626130262619, -0.6900304028950971, -2.802252209586248, 1.3450316038666192, -0.8318437886787962], [1.8490222327492485, 0.9892824063582712, 0.5456374288891388, -0.23310348531275052, 4.868655097244829, -1.0529400872244883, 0.771308983742056, 2.2518777338031426, 1.574885709642862, -0.08934820281295612], [-1.0774545073907758, 1.4181623072381275, 0.9495568158929204, -3.605127086751668, -0.3400616114549974, 1.9096921699384273, -0.9574352547918134, -2.0520014880499233, -0.11716456887283988, 0.028639651403831755], [0.9068622813324992, 1.0462147993919189, 2.855893915485687, 1.7634607545791856, 0.7698039485928974, -0.6609968047241781, -2.332932296807691, -2.4374521093626518, -1.475797308793465, -0.49333366205325696], [-0.10769816310287819, -0.09432540024884592, -2.681836065015078, -0.8166976735604847, 1.1665311092681707, -0.1175726046337609, -4.222650180309921, 0.48251834462354204, 0.3512906226050487, -0.1955733893542843], [0.06351418886755462, -3.211677637502593, 1.6676973610015458, -1.1123616997569667, 0.8799649931837635, -1.5308956742761999, -1.0712690603771435, -0.7655236813889127, 0.45507168616674354, -0.6180776975826666], [0.9167524422063551, 1.4795509908363447, 2.265610406111042, -0.3270969394388432, 1.1483430827551209, -0.2562727842310739, -2.3171718290324606, -0.248561284280739, -1.903976401027503, -1.2923431759527193], [-1.941900391361085, -0.8999989874973442, -2.5830376805998196, -1.3290482902164358, -1.0114505093860504, 0.7889585894483188, 1.2952927201864912, 1.8206070489719965, 0.8753663765152886, 0.7164652639851367], [-1.4068798013705102, 0.057421283216954076, 1.1711680984141826, 1.2555523531178696, -0.6122398759027028, -0.29103826152433493, 0.2758941322972376, 2.161660746978357, 2.173266319951854, -0.7300895064398375]], [[2.39436057051602, 4.5399646628947625, 0.2562388983831726, 2.222134199221036, 1.4810292274859223, 4.290363845023851, -1.1699399716089496, 4.161100780530268, -5.6310271935293015, 3.316576925469206, -4.714190847660528, 3.5022733978886005, 1.2596732203255665, -1.3566396588347742, 3.2389408924644614, -0.9725915117245078], [-3.8403425183504942, -3.5645555578495998, 0.6922017302808181, -3.514551581174185, -2.9048658093462905, -2.985788169521476, 0.1121320751004702, -2.905744673306757, 4.898205614470761, -2.71991828589195, 4.756941251473756, -2.794506060151017, -1.9726458700311347, 1.123565010695411, -2.383796461478806, 1.3418898357889375]]];

// 10 x 16 x 2 network
// 1000 / 1000 - 4 in a row
network.biases = [[4.241935344439262, 4.5434068201936295, -1.508938071904338, 1.0970694040425246, 1.458591963168787, 2.63053846440246, -0.5321069205491976, 1.0708407995426987, -3.0338712480175603, 0.0866117170180233, -4.617454117677979, 1.224575765503957, 0.19666207756924403, -2.8754762568022842, 4.290273615066881, 1.5539772734402235], [-1.5003584451887948, 1.6977774202984062]];
network.weights = [[[0.1064834439213615, 0.6286925655977229, -0.4239159988872783, 0.6154623942242674, -0.47533031689219724, -3.7274788820091427, -2.036516120052575, -0.006809246977359059, -1.3340506630812583, -2.895922010513007], [1.286098518226616, 1.8202251454457739, 0.9221042042448914, 1.8334341332555908, -1.3615170527433358, -1.9257226334875535, -2.520754512301611, -1.1392892482666648, -2.381829553578018, -0.7493687524852913], [0.035686960981925114, 0.6422914282279288, 1.5054085796841512, 0.28188902419332323, -0.23817227844206887, 0.3050606401194184, -0.10959102092695983, -1.1516782065221232, -2.1747465850804573, 0.06753609555576302], [0.3181875147506542, -0.9361019900050834, 1.328726540655192, -4.020645533158418, 0.4584593700576401, -0.4850113637083727, -0.12334746373230722, -2.058355400224092, -1.9241684958318124, -0.1833857370224524], [-0.37533629785375594, -0.08778453837047051, -1.4324891239232618, -1.6415199417718054, 0.025328805444462404, 1.4163493073582707, -2.292980013814448, -1.9054327054697568, -0.28694041417978305, 1.5018666807457717], [-0.8985266819704679, -2.817423843472632, -0.5631089554007176, 0.621672522943206, -0.16485739749303868, -4.885103066915697, -0.08139675779546816, 0.06418672049964565, -2.2320805523802543, -1.9648605521168347], [-1.6553830640568354, 0.19223114309543032, 0.5044354152745849, 2.126553185563269, -1.0074300859813021, 0.07717408174063864, 2.0296753779164773, 0.20191567633140237, 0.19232223173693078, 1.0681125964328788], [0.44473818507566776, -0.08533795559311275, -0.4804126733891907, -2.5109208692309277, 3.453710093499366, -2.985133133683606, -0.7025032553288417, -2.857314148169119, 1.814337376050471, -0.6863386903407137], [1.4749505725340828, 0.9745325912602436, 0.10493172910817235, -0.2756632951812839, 7.083215756443153, -1.9046367257389072, 0.5896353858503725, 2.252694368986822, 2.0831519622328556, 0.02491080767687711], [-1.5692608912683406, 1.54764310714009, 1.4770869370288355, -4.138343295895103, -0.6158399720873249, 1.4501603693677716, -0.8053079239325139, -2.3415476588839854, -0.07797636314105154, -0.06603668406082353], [0.760714795780927, 1.5607374499360045, 3.482140570753159, 1.960387444886913, 0.744178129212615, -0.7772140991543655, -2.2387847881127207, -2.458846813812167, -0.9057751899920516, -0.9348404813963515], [-0.19400345960464804, -0.002837630254452399, -3.3637479844184823, -0.26858336215824646, 0.8692898469482737, -0.1620156450789377, -5.179223237518062, 0.9212649042539747, 0.3567232997524131, -0.35651446686743693], [0.739096347667184, -3.9341288634931124, 1.3665183529462401, -0.5656603523072271, 0.7489055109567331, -1.3421885394392101, -0.86466903239006, -1.7983011670631508, 0.7293433444204133, -0.7885946744266035], [1.18871418947737, 1.635730807283547, 2.4281657291083913, 0.016059711548640613, 1.1822872788499876, -0.3334652455713709, -1.9627436800827371, -0.4470673547380676, -1.8441940326240078, -1.2521926965745558], [-2.0034744815696772, -1.2593710833056944, -2.1550893181056283, -1.710228540342165, -3.0391255939370283, 0.16014279015308303, 0.669931920626475, 1.5257380671684446, 1.6201874950045017, 0.9683782049102323], [-1.8873579792047879, 0.08953922496867074, 1.1688427991996972, 1.158006265412961, -1.1754497485531485, -0.34561201446687756, -0.11168830905218377, 1.914011492955658, 1.916930407196794, -1.7804260934026876]], [[3.750832985341431, 5.297062073564206, -0.12350830969026853, 2.9969668205862967, 2.409401422091472, 5.136593654734642, -1.4883418189815836, 4.315250099249963, -7.262562825542589, 4.0707350689352175, -5.892818965673903, 4.753167804039322, 2.094014647622887, -2.219079815045864, 4.2074192068340075, -1.7791861187214209], [-4.644308831651109, -4.6387970788624076, 0.9212204346234559, -4.049641439710723, -3.3122708435279766, -4.316464995328504, 0.49628416375227224, -3.761850267866262, 7.039648678922523, -3.4353197828217343, 6.013756316194941, -4.13530556478956, -2.570114175455937, 1.972809215678958, -3.6411532119734864, 1.915890853121515]]];

// Uncomment to train (will not generate new biases and weights, that's done by the Network constructor)
// network.stochasticGradientDescent(trainingData, 100, batchSize, learningRate, testData);
// console.log(JSON.stringify(network.biases));
// console.log(JSON.stringify(network.weights));

const readline = require('readline');
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function readInputAndGuess() {
    rl.question(`Enter sequence of 1's and 0's (max ${numInputs}): `, sequence => {
        sequence = [...sequence.split(''), ...Array(numInputs).fill('0')].slice(0, numInputs)
            .map(v => v === '1' ? 1 : 0);
        let answer = hasNInARow(sequence, nInARow);
        let guess = !!argMax(network.feedForward(sequence));
        if (guess === answer) {
            process.stdout.write(`\x1b[32mCorrectly\x1b[0m identified ${guess ? '' : 'missing '}${nInARow} in a row!\n`);
        } else {
            process.stdout.write(`\x1b[31mWrongly\x1b[0m guessed there was${guess ? '' : "n't"} ${nInARow} in a row\n`);
        }
        readInputAndGuess();
    });
}

readInputAndGuess();